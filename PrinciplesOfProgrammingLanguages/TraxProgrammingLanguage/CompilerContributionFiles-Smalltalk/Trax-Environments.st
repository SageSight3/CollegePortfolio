Object subclass: #TraxEnvironment	instanceVariableNames: 'methods variables activations'	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxEnvironment methodsFor: 'initialize-release' stamp: 'SA 11/17/2023 16:29'!declare: aName method: aMethod	methods bind: aName to: aMethod.! !!TraxEnvironment methodsFor: 'initialize-release' stamp: 'SA 11/17/2023 16:17'!declare: aName variable: aVariable		variables bind: aName to: aVariable.! !!TraxEnvironment methodsFor: 'initialize-release' stamp: 'SA 11/16/2023 17:46'!initialize	super initialize.	variables := TraxScope new.	methods := TraxScope new.	activations := OrderedCollection new.! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!activations	^ activations! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!activations: anObject	activations := anObject.! !!TraxEnvironment methodsFor: 'accessing' stamp: 'SA 11/17/2023 16:25'!getMethod: aString 		^self methods get: aString.! !!TraxEnvironment methodsFor: 'accessing' stamp: 'SA 11/17/2023 16:22'!getVariable: aString 		^self variables get: aString.! !!TraxEnvironment methodsFor: 'accessing' stamp: 'SA 11/17/2023 16:56'!globalScope		^self activations isEmpty		ifTrue: [ self variables ]		ifFalse: [ self activations first ]! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!methods	^ methods! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!methods: anObject	methods := anObject.! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!variables	^ variables! !!TraxEnvironment methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:19'!variables: anObject	variables := anObject.! !!TraxEnvironment methodsFor: 'testing' stamp: 'SA 11/17/2023 16:28'!hasMethod: aString 		^self methods  hasBinding: aString.! !!TraxEnvironment methodsFor: 'testing' stamp: 'SA 11/17/2023 16:28'!hasVariable: aString 	^self variables hasBinding: aString.! !!TraxEnvironment methodsFor: 'activating' stamp: 'SA 11/17/2023 16:49'!activate	| newScope |	newScope := TraxScope newScopeIn: self globalScope.	activations addLast: variables.	variables := newScope.! !!TraxEnvironment methodsFor: 'activating' stamp: 'SA 11/17/2023 17:04'!deactivate		self variables: self activations removeLast.! !TestCase subclass: #TraxEnvironmentTestCase	instanceVariableNames: 'traxEnv'	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxEnvironmentTestCase methodsFor: 'running' stamp: 'SA 11/17/2023 16:59'!testActivation	| globalScope scope1 scope2 |	globalScope := self traxEnv variables.	self 		assert: TraxNullScope default		equals: globalScope outerScope.	self traxEnv activate.	scope1 := self traxEnv variables.	self 		assert: globalScope		equals: self traxEnv variables outerScope.	self assert: 1 equals: self traxEnv activations size.	self traxEnv activate.	scope2 := self traxEnv variables.	self deny: (scope1 = scope2).	self 		assert: globalScope		equals: self traxEnv variables outerScope.	self assert: 2 equals: self traxEnv activations size.! !!TraxEnvironmentTestCase methodsFor: 'running' stamp: 'jws 11/16/2023 10:37'!testDeactivation	| scope1  |	self traxEnv activate.	scope1 := self traxEnv variables.	self traxEnv activate.	self traxEnv variables.
	self traxEnv deactivate.	self assert: 1 equals: traxEnv activations size.	self 		assert: scope1		equals: self traxEnv variables.	self traxEnv deactivate.	self assert: traxEnv activations isEmpty.! !!TraxEnvironmentTestCase methodsFor: 'running' stamp: 'SA 11/17/2023 16:26'!testMethodAccess	self deny: (self traxEnv hasMethod: 'foo').	self traxEnv declare: 'foo' method: 'this should be a method object'.	self assert: (self traxEnv hasMethod: 'foo').	self 		assert: 'this should be a method object'		equals: (self traxEnv getMethod: 'foo').	self 		should: [self traxEnv getVariable: 'foo']		raise: TraxUndeclaredError.! !!TraxEnvironmentTestCase methodsFor: 'running' stamp: 'SA 11/17/2023 16:17'!testVariableAccess	self deny: (self traxEnv hasVariable: 'foo').	self traxEnv declare: 'foo' variable: 'this should be a variable object'.	self assert: (self traxEnv hasVariable: 'foo').	self 		assert: 'this should be a variable object'		equals: (self traxEnv getVariable: 'foo').	self 		should: [self traxEnv getMethod: 'foo']		raise: TraxUndeclaredError.! !!TraxEnvironmentTestCase methodsFor: 'initialize-release' stamp: 'jws 11/16/2023 10:17'!setUp	super setUp.	traxEnv := TraxEnvironment new.! !!TraxEnvironmentTestCase methodsFor: 'initialize-release' stamp: 'jws 11/16/2023 09:25'!tearDown	traxEnv := nil.	super tearDown.! !!TraxEnvironmentTestCase methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:16'!traxEnv	^ traxEnv! !!TraxEnvironmentTestCase methodsFor: 'accessing' stamp: 'jws 11/16/2023 10:16'!traxEnv: anObject	traxEnv := anObject.! !TestCase subclass: #TraxNullScopeTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxNullScopeTestCase methodsFor: 'running' stamp: 'jws 11/15/2023 10:41'!testBindTo	self		should: [TraxNullScope default bind: 'kevin bacon' to: 'actor']		raise: TraxError! !!TraxNullScopeTestCase methodsFor: 'running' stamp: 'jws 11/15/2023 10:41'!testBindings	self 		should: [TraxNullScope default bindings]		raise: TraxError.	self 		should: [TraxNullScope default bindings: Dictionary new]		raise: TraxError.! !!TraxNullScopeTestCase methodsFor: 'running' stamp: 'SA 11/16/2023 16:56'!testGet	self		should: [TraxNullScope default get: 'kevin bacon']		raise: TraxUndeclaredError ! !!TraxNullScopeTestCase methodsFor: 'running' stamp: 'jws 11/15/2023 10:41'!testHasBinding	self deny: (TraxNullScope default hasBinding: 'count')! !!TraxNullScopeTestCase methodsFor: 'running' stamp: 'jws 11/15/2023 10:41'!testOuterScope	self 		assert: TraxNullScope default 		equals: TraxNullScope default outerScope.	self 		should: [TraxNullScope default outerScope: TraxScope new]		raise: TraxError.! !Object subclass: #TraxScope	instanceVariableNames: 'bindings outerScope'	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxScope methodsFor: 'initialize-release' stamp: 'SA 11/16/2023 17:18'!initialize	super initialize.	bindings := Dictionary new.	outerScope := TraxNullScope default.! !!TraxScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:36'!bind: aString to: aTraxObject	(self bindings includesKey: aString) ifTrue: [ TraxMultiplyDeclaredError signal: aString ].	self bindings at: aString put: aTraxObject.! !!TraxScope methodsFor: 'accessing' stamp: 'jws 11/15/2023 10:15'!bindings	^ bindings! !!TraxScope methodsFor: 'accessing' stamp: 'jws 11/15/2023 10:15'!bindings: anObject	bindings := anObject.! !!TraxScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:33'!get: aString 		^self bindings 		at: aString		ifAbsent: [ self outerScope get: aString ]! !!TraxScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:10'!outerScope	^outerScope! !!TraxScope methodsFor: 'accessing' stamp: 'jws 11/15/2023 10:15'!outerScope: anObject	outerScope := anObject.! !!TraxScope methodsFor: 'testing' stamp: 'SA 11/16/2023 17:24'!hasBinding: aString 			^(self bindings includesKey:aString) or: [ self outerScope hasBinding: aString ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TraxScope class	instanceVariableNames: ''!!TraxScope class methodsFor: 'instance creation' stamp: 'SA 11/16/2023 17:42'!newScopeIn: aTraxScope 		^self new		outerScope: aTraxScope;		yourself.! !TraxScope subclass: #TraxNullScope	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 16:54'!bind: aString to: aString2 		TraxError signal: 'Null scope does not have bindings' "<- how to raise error"! !!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:03'!bindings	TraxError signal: 'Null scope has no bindings'! !!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:06'!bindings: aDictionary	TraxError signal: 'Null scope has no bindings'! !!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 16:59'!get: aString 		TraxUndeclaredError signal: aString! !!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:10'!outerScope	^self! !!TraxNullScope methodsFor: 'accessing' stamp: 'SA 11/16/2023 17:11'!outerScope: anObject	TraxError signal: 'Outside of scope'! !!TraxNullScope methodsFor: 'testing' stamp: 'SA 11/16/2023 17:01'!hasBinding: aString 		^false! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TraxNullScope class	instanceVariableNames: 'default'!!TraxNullScope class methodsFor: 'as yet unclassified' stamp: 'SA 11/16/2023 16:50'!default	default isNil ifTrue: [ default := super new ].	^default! !TestCase subclass: #TraxScopeTestCase	instanceVariableNames: 'globalScope'	classVariableNames: ''	poolDictionaries: ''	category: 'Trax-Environments'!!TraxScopeTestCase methodsFor: 'running' stamp: 'SA 11/16/2023 17:12'!testGlobalScope	| aVar |	self assert: TraxNullScope default equals: self globalScope outerScope.	self deny: (self globalScope hasBinding: 'foo').	aVar := TraxVariable integer.	self globalScope bind: 'foo' to: aVar.	self assert: aVar equals: (self globalScope get: 'foo').	self assert: (self globalScope hasBinding: 'foo').	self		should: [self globalScope bind: 'foo' to: TraxVariable string]		raise: TraxMultiplyDeclaredError! !!TraxScopeTestCase methodsFor: 'running' stamp: 'jws 11/16/2023 10:14'!testNestedScope	| innerScope var1 var2 var3 |	innerScope := TraxScope newScopeIn: self globalScope.	var1 := TraxVariable integer.	var2 := TraxVariable string.	var3 := TraxVariable boolean.	self globalScope bind: 'foo' to: var1.	innerScope bind: 'baz' to: var2.	self assert: (innerScope hasBinding: 'foo').	self assert: (innerScope hasBinding: 'baz').	self assert: var1 equals: (innerScope get: 'foo').	self assert: var2 equals: (innerScope get: 'baz').	innerScope bind: 'foo' to: var3.	self assert: var3 equals: (innerScope get: 'foo').	self assert: var1 equals: (self globalScope get: 'foo').	self		should: [self globalScope get: 'baz']		raise: TraxUndeclaredError.! !!TraxScopeTestCase methodsFor: 'initialize-release' stamp: 'jws 11/15/2023 10:41'!setUp	super setUp.	globalScope := TraxScope new.! !!TraxScopeTestCase methodsFor: 'initialize-release' stamp: 'jws 11/15/2023 10:35'!tearDown	globalScope := nil.	super tearDown.! !!TraxScopeTestCase methodsFor: 'accessing' stamp: 'jws 11/15/2023 10:31'!globalScope	^ globalScope! !!TraxScopeTestCase methodsFor: 'accessing' stamp: 'jws 11/15/2023 10:31'!globalScope: anObject	globalScope := anObject.! !